Игра "21 очко" на Python.
Цель программы:
Создать интерактивную игру "21 очко" на языке Python, где игрок будет играть против компьютера, стараясь набрать как можно ближе к 21 очку, не превышая это значение.
Разбор кода
1) import pygame
import random
Импортируем модули pygame и random.
2)pygame.init()
Инициализируем Pygame.
3)Определяем цвета, используя RGB-значения. В данном случае, у нас есть черный (BLACK) и белый (WHITE) цвета.
4)Задаем размеры окна и создаем окно с помощью pygame.display.set_mode(). Устанавливаем заголовок окна с помощью pygame.display.set_caption().
5)font = pygame.font.SysFont(None, 36)
Создаем объект шрифта для отображения текста. В данном случае, мы используем системный шрифт размером 36 пикселей.
5)Определяем класс Card, который представляет карту. Каждая карта имеет значение (value). У класса есть метод draw(), который рисует карту на экране. Он использует функции pygame.draw.rect() для отрисовки прямоугольника (карты) и screen.blit() для отображения текста на карте.
6)Создаем колоду карт. У нас есть карты со значениями от 1 до 10. Каждое значение повторяется 4 раза (по количеству мастей). Колода представлена списком deck.
7)Создаем пустые списки для карт игрока (player_hand) и дилера (dealer_hand).
8)Определяем функцию calculate_score(), которая вычисляет сумму значений карт в руке (hand). Если сумма превышает 21, то возвращается значение 21.
9)Раздаем по 2 карты игроку и дилеру из колоды. Мы выбираем случайную карту из колоды с помощью random.choice() и добавляем ее в руку игрока и дилера.
10)Устанавливаем флаги для игры (running), хода игрока (player_turn) и хода дилера (dealer_turn). Входим в основной игровой цикл (while running), в котором обновляем экран, заполняя его черным цветом.
11)Рисуем карты игрока и дилера на экране. Мы используем цикл for и функцию enumerate() для получения индекса и значения каждой карты. Затем вызываем метод draw() для отрисовки каждой карты на экране.
12)Вычисляем очки игрока и дилера с помощью функции calculate_score(). Создаем текстовые объекты с помощью font.render() для отображения очков на экране. Затем используем screen.blit() для отображения текста на экране.
13) Если ход игрока player_turn равен True, то продолжаем следующую итерацию цикла без выполнения оставшейся части кода. Если ход дилера dealer_turn равен True, то дилер продолжает брать карты до тех пор, пока его счет не достигнет или превысит 17. Карты добавляются в руку дилера dealer_hand.append(Card(random.choice(deck))), а счет пересчитывается с помощью функции calculate_score().
14)Определяем победителя на основе счета. Создаем текстовый объект с помощью font.render() для отображения результата игры на экране. Затем используем screen.blit() для отображения текста на экране.
15)pygame.display.flip()
Рисуем карты игрока и дилера на экране после каждого хода\. Используем цикл for и функцию enumerate() для получения индекса и значения каждой карты. Затем вызываем метод draw() для отрисовки каждой карты на экране. Используем pygame.display.flip() для обновления экрана.
pygame.quit()
Завершаем работу Pygame после выхода из игрового цикла.